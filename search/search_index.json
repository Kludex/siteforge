{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SiteForge","text":""},{"location":"#features","title":"Features \ud83d\ude80","text":""},{"location":"#installation","title":"Installation \u270d\ufe0f","text":"<p>SiteForge can be installed by running <code>pip install siteforge</code>.</p>"},{"location":"#usage","title":"Usage \ud83d\udcd6","text":""},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#siteforge","title":"SiteForge","text":"<ul> <li> AsyncAPI support.</li> <li> WebSockets documentation.</li> <li> Own <code>TestClient</code> with both flavors: <code>async</code> and <code>sync</code>.</li> <li> Generate clients for other languages via CLI.</li> <li> Support lifespan on child apps.</li> <li> Add <code>uvicorn</code> as only server.</li> <li> Runtime warning when sending back an exception that is not documented.</li> <li> More plugable background tasks API.</li> <li> OpenTelemetry support.<ul> <li> Add <code>system.uptime</code> metric (https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/31627).</li> </ul> </li> <li> Automatic cache on <code>GET</code> and <code>HEAD</code> methods (https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods).</li> <li> Add <code>HEAD</code> method on <code>GET</code> routes.</li> <li> Health endpoint.<ul> <li> Don\u2019t print access logs on health endpoint.</li> </ul> </li> <li> Add own routing system.</li> <li> Add benchmarks (https://github.com/CodSpeedHQ).</li> <li> Remove anyio, but still support trio.</li> <li> Rust multipart package.</li> <li> Remove support for ASGI 2.</li> <li> Multiple response output format depending on the <code>Accept</code> header.</li> <li> Add other decompression middlewares (zstd, brotli, etc.)</li> </ul>"},{"location":"roadmap/#forgeserver","title":"ForgeServer","text":"<ul> <li> HTTP/2 support.</li> <li> HTTP/3 support.</li> <li> WebSockets sans-io support.</li> <li> Create Rust HTTP parser, and use it.</li> <li> Wait for first body response to send headers.</li> <li> Remove support for ASGI 2.</li> <li> Add new logging system.</li> <li> Move reload and multiprocess to the <code>Server</code> class.</li> </ul>"},{"location":"roadmap/#infra","title":"Infra","text":"<ul> <li> Run tests only when source code imported had changes.</li> <li> Set development VERSION to <code>0.0.0</code>, and publish on every PR to <code>pypi.test</code>.</li> </ul>"},{"location":"roadmap/#documentation","title":"Documentation","text":"<ul> <li> Add comments and reactions.</li> <li> Add a release notes.</li> </ul>"},{"location":"asgi-client/","title":"ASGI Client","text":""},{"location":"asgi-types/","title":"ASGI Types","text":""},{"location":"forgeserver/","title":"ForgeServer","text":"<p> Documentation | Source Code </p>"},{"location":"forgeserver/#features","title":"Features \ud83d\ude80","text":""},{"location":"forgeserver/#installation","title":"Installation \u270d\ufe0f","text":"<p>ForgeServer can be installed by running <code>pip install forgeserver</code>.</p>"},{"location":"forgeserver/#usage","title":"Usage \ud83d\udcd6","text":""},{"location":"siteforge/","title":"SiteForge","text":"<p> Documentation | Source Code </p>"},{"location":"siteforge/#features","title":"Features \ud83d\ude80","text":""},{"location":"siteforge/#installation","title":"Installation \u270d\ufe0f","text":"<p>SiteForge can be installed by running <code>pip install siteforge</code>.</p>"},{"location":"siteforge/#usage","title":"Usage \ud83d\udcd6","text":""},{"location":"siteforge/api/","title":"API Reference","text":"<p>               Bases: <code>Starlette</code></p> <p>SiteForge main class.</p> Source code in <code>src/siteforge/siteforge/applications.py</code> <pre><code>def __init__(\n    self,\n    debug: bool = False,\n    routes: Sequence[BaseRoute] | None = None,\n    middleware: Sequence[Middleware] | None = None,\n    # TODO: Add lifespan type hint from asgi-types.\n    lifespan: Any | None = None,\n) -&gt; None:\n    self.debug = debug\n    # TODO: Remove the state.\n    self.state = State()\n    self.router = Router(routes, lifespan=lifespan)\n    self.exception_handlers = {}\n    self.user_middleware = [] if middleware is None else list(middleware)\n    self.middleware_stack: ASGIApp | None = None\n</code></pre>"}]}